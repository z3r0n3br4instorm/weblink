# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dlink_down.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import sys
import threading
import subprocess
import re
import sys

global percentage, eta, speed,x,t,b,error,z,noerr,ls
t = 1
b = 0
x = 0
z = 0
ls= 0
percentage = 0
eta = 0
speed = 0
error = "python /home/zerone/ztos_notifications/error.py 'An Error Occured' 'Download Failed !'"
noerr = "python /home/zerone/ztos_notifications/notific.py 'WebLink Notification<br>Download Complete !<br>Please Check if wget exited properly...'"
url = sys.argv[1]


def youtube_dl_thread():
    global percentage, eta, speed, url, x, z
    # Define the URL to download and the output folder
    destination_folder = "/home/zerone/Downloads"
    output_format = f"{destination_folder}/%(title)s.%(ext)s"

    # Run the youtube-dl command
    command = ["youtube-dl", "-o", output_format, url]
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

    for line in process.stderr:
        percentage_match = re.search(r'\d+%', line)
        eta_match = re.search(r'\d+:\d+', line)
        speed_match = re.search(r'\d+\.\d+\s\w+/s', line)

        if percentage_match:
            percentage = percentage_match.group()
        if eta_match:
            eta = eta_match.group()
        if speed_match:
            speed = speed_match.group()

    # Wait for the youtube-dl process to complete
    process.wait()

    # Check the youtube-dl process return code
    if process.returncode != 0:
        z = 20
        print(f"Error: youtube-dl process returned a non-zero exit code ({process.returncode})")
    else:
        z = 10

def wget_thread():
    global percentage,eta,speed,url,x,z
    # Define the URL to download and the output file
    destination_folder = "/home/zerone/Downloads"
    # Run the wget command
    command = ["wget", "-P", destination_folder, url]
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

    for line in process.stderr:
        percentage_match = re.search(r'\d+%', line)
        eta_match = re.search(r'\d+:\d+', line)
        speed_match = re.search(r'\d+\.\d+\s\w+/s', line)

        if percentage_match:
            #print(f"Percentage: {percentage_match.group()}")
            percentage =  percentage_match.group()
        if eta_match:
            #print(f"ETA: {eta_match.group()}")
            eta = eta_match.group()
        if speed_match:
            speed = speed_match.group()
            #print(f"Speed: {speed_match.group()}")
    # Wait for the wget process to complete
    process.wait()

    # Check the wget process return code
    if process.returncode != 0:
        z = 20
        print(f"Error: Wget process returned a non-zero exit code ({process.returncode})")
    else:
        z = 10

wget_proc = threading.Thread(target=wget_thread)
ytd_proc = threading.Thread(target=youtube_dl_thread)
if "youtube" in url:
    ytd_proc.start()
else:
    wget_proc.start()
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(512, 244)
        Dialog.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(10, 90, 491, 111))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setStyleSheet("""

            QProgressBar::chunk {
                background: #007ACC; /* Sci-fi blue color */
                border-radius: 0px; /* Remove border-radius for a flat look */
                width: 15px; /* Adjust the width of the chunks */
            }
            
            /* Windows 98 block-like design */
            QProgressBar::chunk:horizontal {
                border: 1px solid grey;
                border-radius: 0px;
            }
            
            QProgressBar::chunk:vertical {
                border: 1px solid grey;
                border-radius: 0px;
            }
            
            /* Set the block spacing */
            QProgressBar::chunk:only-one {
                border: 1px solid grey;
                border-radius: 0px;
            }
            
            /* Add some text inside the chunks */
            QProgressBar::chunk::text {
                color: white;
                font-size: 12px;
            }
        }
        """)

        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(10, 10, 491, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(10, 50, 501, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(10, 210, 311, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(420, 180, 101, 101))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("/home/zerone/ZeroneApps/zrn_logo_no_back.png"))
        self.label_4.setScaledContents(True)
        self.label_4.setObjectName("label_4")
        self.label_4.raise_()
        self.progressBar.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self._update_timer = QtCore.QTimer()
        self._update_timer.timeout.connect(self.main_refresh)
        self._update_timer.timeout.connect(self.progress_load_anim)
        self._update_timer.start(500)
        self._update_timer2 = QtCore.QTimer()
        self._update_timer2.timeout.connect(self.display_bar_refresh)
        self._update_timer2.start(100)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
    
    def progress_load_anim(self):
        global  ls,x
        if (x == 5) and (z  != 10 or z != 20):
            if ls == 0:
                self.progressBar.setValue(100)
                ls = 1
            else :
                self.progressBar.setValue(0)
                ls = 0
    def display_bar_refresh(self):
        _translate = QtCore.QCoreApplication.translate
        global x,t,error,z
        t +=1
        if t > 4:
            t = 1
        dot_no = "."*t
        if (x == 5) and (z  != 10 or z != 20):
            self.label.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:18pt;\">Establishing Downlink"+dot_no+"</span></p></body></html>"))
        elif (z == 10):
            self.label.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:18pt;\">Download Complete !</span></p></body></html>"))
        elif (z == 20):
            self.label.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:18pt;\">Downlink Failed /!\</span></p></body></html>"))
            os.system(error)
        elif(x == 0 and z  != 10 or z != 20):
            self.label.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:18pt;\">Downloading"+dot_no+"</span></p></body></html>"))

    def main_refresh(self):
        global percentage,speed,eta,x,url,error,noerr,ls
        try:
            _translate = QtCore.QCoreApplication.translate
            self.label_2.setText(url)
            if type(percentage) == str:
                percentage = percentage.replace("%","")
            if int(percentage) == 0:
                x = 5
            elif int(percentage) > 0:
                x = 0
            elif int(percentage) == 100:
                z = 10
                os.system(noerr)
            else:
                x = 0
            self.progressBar.setValue(int(percentage))
            self.label_3.setText(_translate("Dialog", "Link Speed : "+str(speed)+" | ETA : "+str(eta)+""))
        except:
            os.system(error)
            os.system("killall -i wget -y")
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "DOWNLINK"))
        self.label.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:18pt;\">Initializing Downlink...</span></p></body></html>"))
        self.label_2.setText(_translate("Dialog", "Address Loading..."))
        self.label_3.setText(_translate("Dialog", "Link Speed : 0Kbps | ETA : 0hrs"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
    
